import { useState, useEffect } from 'react';
import './ThemeToggle.css';

interface ThemeToggleProps {
  onThemeChange?: (theme: 'light' | 'dark') => void;
}

const ThemeToggle = ({ onThemeChange }: ThemeToggleProps) => {
  const [isDark, setIsDark] = useState(false);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Ç–µ–º—É –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const savedTheme = localStorage.getItem('theme');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    const shouldBeDark = savedTheme === 'dark' || (!savedTheme && prefersDark);
    setIsDark(shouldBeDark);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
    document.documentElement.setAttribute('data-theme', shouldBeDark ? 'dark' : 'light');
    
    if (onThemeChange) {
      onThemeChange(shouldBeDark ? 'dark' : 'light');
    }
  }, [onThemeChange]);

  const toggleTheme = () => {
    const newTheme = !isDark;
    setIsDark(newTheme);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('theme', newTheme ? 'dark' : 'light');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
    document.documentElement.setAttribute('data-theme', newTheme ? 'dark' : 'light');
    
    if (onThemeChange) {
      onThemeChange(newTheme ? 'dark' : 'light');
    }
  };

  return (
    <div className="theme-toggle">
      <span className={`theme-label ${!isDark ? 'active' : ''}`}>‚òÄÔ∏è</span>
      <button 
        className={`toggle-slider ${isDark ? 'dark' : 'light'}`}
        onClick={toggleTheme}
        aria-label="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É"
      >
        <div className="slider-thumb" />
      </button>
      <span className={`theme-label ${isDark ? 'active' : ''}`}>üåô</span>
    </div>
  );
};

export default ThemeToggle;
